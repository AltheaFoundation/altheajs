// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file canto/epochs/v1/genesis.proto (package canto.epochs.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message canto.epochs.v1.EpochInfo
 */
export class EpochInfo extends Message<EpochInfo> {
  /**
   * @generated from field: string identifier = 1;
   */
  identifier = "";

  /**
   * @generated from field: google.protobuf.Timestamp start_time = 2;
   */
  startTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Duration duration = 3;
   */
  duration?: Duration;

  /**
   * @generated from field: int64 current_epoch = 4;
   */
  currentEpoch = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp current_epoch_start_time = 5;
   */
  currentEpochStartTime?: Timestamp;

  /**
   * @generated from field: bool epoch_counting_started = 6;
   */
  epochCountingStarted = false;

  /**
   * @generated from field: int64 current_epoch_start_height = 7;
   */
  currentEpochStartHeight = protoInt64.zero;

  constructor(data?: PartialMessage<EpochInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.epochs.v1.EpochInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "start_time", kind: "message", T: Timestamp },
    { no: 3, name: "duration", kind: "message", T: Duration },
    { no: 4, name: "current_epoch", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "current_epoch_start_time", kind: "message", T: Timestamp },
    { no: 6, name: "epoch_counting_started", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "current_epoch_start_height", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EpochInfo {
    return new EpochInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EpochInfo {
    return new EpochInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EpochInfo {
    return new EpochInfo().fromJsonString(jsonString, options);
  }

  static equals(a: EpochInfo | PlainMessage<EpochInfo> | undefined, b: EpochInfo | PlainMessage<EpochInfo> | undefined): boolean {
    return proto3.util.equals(EpochInfo, a, b);
  }
}

/**
 * GenesisState defines the epochs module's genesis state.
 *
 * @generated from message canto.epochs.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * @generated from field: repeated canto.epochs.v1.EpochInfo epochs = 1;
   */
  epochs: EpochInfo[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.epochs.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epochs", kind: "message", T: EpochInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

