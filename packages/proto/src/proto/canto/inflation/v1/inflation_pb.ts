// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file canto/inflation/v1/inflation.proto (package canto.inflation.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * InflationDistribution defines the distribution in which inflation is
 * allocated through minting on each epoch (staking, incentives, community). It
 * excludes the team vesting distribution, as this is minted once at genesis.
 * The initial InflationDistribution can be calculated from the Evmos Token
 * Model like this:
 * mintDistribution1 = distribution1 / (1 - teamVestingDistribution)
 * 0.5333333         = 40%           / (1 - 25%)
 *
 * @generated from message canto.inflation.v1.InflationDistribution
 */
export class InflationDistribution extends Message<InflationDistribution> {
  /**
   * staking_rewards defines the proportion of the minted minted_denom that is
   * to be allocated as staking rewards
   *
   * @generated from field: string staking_rewards = 1;
   */
  stakingRewards = "";

  /**
   * // usage_incentives defines the proportion of the minted minted_denom that is
   * // to be allocated to the incentives module address
   * string usage_incentives = 2 [
   *   (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
   *   (gogoproto.nullable) = false
   * ];
   * community_pool defines the proportion of the minted minted_denom that is to
   * be allocated to the community pool
   *
   * @generated from field: string community_pool = 3;
   */
  communityPool = "";

  constructor(data?: PartialMessage<InflationDistribution>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.inflation.v1.InflationDistribution";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "staking_rewards", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "community_pool", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InflationDistribution {
    return new InflationDistribution().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InflationDistribution {
    return new InflationDistribution().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InflationDistribution {
    return new InflationDistribution().fromJsonString(jsonString, options);
  }

  static equals(a: InflationDistribution | PlainMessage<InflationDistribution> | undefined, b: InflationDistribution | PlainMessage<InflationDistribution> | undefined): boolean {
    return proto3.util.equals(InflationDistribution, a, b);
  }
}

/**
 * ExponentialCalculation holds factors to calculate exponential inflation on
 * each period. Calculation reference:
 * periodProvision = exponentialDecay       *  bondingIncentive
 * f(x)            = (a * (1 - r) ^ x + c)  *  (1 + max_variance - bondedRatio *
 * (max_variance / bonding_target))
 *
 * @generated from message canto.inflation.v1.ExponentialCalculation
 */
export class ExponentialCalculation extends Message<ExponentialCalculation> {
  /**
   * initial value
   *
   * @generated from field: string a = 1;
   */
  a = "";

  /**
   * reduction factor
   *
   * @generated from field: string r = 2;
   */
  r = "";

  /**
   * long term inflation
   *
   * @generated from field: string c = 3;
   */
  c = "";

  /**
   * bonding target
   *
   * @generated from field: string bonding_target = 4;
   */
  bondingTarget = "";

  /**
   * max variance
   *
   * @generated from field: string max_variance = 5;
   */
  maxVariance = "";

  constructor(data?: PartialMessage<ExponentialCalculation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.inflation.v1.ExponentialCalculation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "a", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "r", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "c", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "bonding_target", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "max_variance", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExponentialCalculation {
    return new ExponentialCalculation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExponentialCalculation {
    return new ExponentialCalculation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExponentialCalculation {
    return new ExponentialCalculation().fromJsonString(jsonString, options);
  }

  static equals(a: ExponentialCalculation | PlainMessage<ExponentialCalculation> | undefined, b: ExponentialCalculation | PlainMessage<ExponentialCalculation> | undefined): boolean {
    return proto3.util.equals(ExponentialCalculation, a, b);
  }
}

