// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file canto/fees/v1/query.proto (package canto.fees.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Fee } from "./fees_pb.js";
import { Params } from "./genesis_pb.js";

/**
 * QueryFeesRequest is the request type for the Query/Fees RPC method.
 *
 * @generated from message canto.fees.v1.QueryFeesRequest
 */
export class QueryFeesRequest extends Message<QueryFeesRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryFeesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.fees.v1.QueryFeesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFeesRequest {
    return new QueryFeesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFeesRequest {
    return new QueryFeesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFeesRequest {
    return new QueryFeesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFeesRequest | PlainMessage<QueryFeesRequest> | undefined, b: QueryFeesRequest | PlainMessage<QueryFeesRequest> | undefined): boolean {
    return proto3.util.equals(QueryFeesRequest, a, b);
  }
}

/**
 * QueryFeesResponse is the response type for the Query/Fees RPC method.
 *
 * @generated from message canto.fees.v1.QueryFeesResponse
 */
export class QueryFeesResponse extends Message<QueryFeesResponse> {
  /**
   * @generated from field: repeated canto.fees.v1.Fee fees = 1;
   */
  fees: Fee[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryFeesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.fees.v1.QueryFeesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fees", kind: "message", T: Fee, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFeesResponse {
    return new QueryFeesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFeesResponse {
    return new QueryFeesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFeesResponse {
    return new QueryFeesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFeesResponse | PlainMessage<QueryFeesResponse> | undefined, b: QueryFeesResponse | PlainMessage<QueryFeesResponse> | undefined): boolean {
    return proto3.util.equals(QueryFeesResponse, a, b);
  }
}

/**
 * QueryFeeRequest is the request type for the Query/Fee RPC method.
 *
 * @generated from message canto.fees.v1.QueryFeeRequest
 */
export class QueryFeeRequest extends Message<QueryFeeRequest> {
  /**
   * contract identifier is the hex contract address of a contract
   *
   * @generated from field: string contract_address = 1;
   */
  contractAddress = "";

  constructor(data?: PartialMessage<QueryFeeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.fees.v1.QueryFeeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFeeRequest {
    return new QueryFeeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFeeRequest {
    return new QueryFeeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFeeRequest {
    return new QueryFeeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFeeRequest | PlainMessage<QueryFeeRequest> | undefined, b: QueryFeeRequest | PlainMessage<QueryFeeRequest> | undefined): boolean {
    return proto3.util.equals(QueryFeeRequest, a, b);
  }
}

/**
 * QueryFeeResponse is the response type for the Query/Fee RPC method.
 *
 * @generated from message canto.fees.v1.QueryFeeResponse
 */
export class QueryFeeResponse extends Message<QueryFeeResponse> {
  /**
   * @generated from field: canto.fees.v1.Fee fee = 1;
   */
  fee?: Fee;

  constructor(data?: PartialMessage<QueryFeeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.fees.v1.QueryFeeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fee", kind: "message", T: Fee },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFeeResponse {
    return new QueryFeeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFeeResponse {
    return new QueryFeeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFeeResponse {
    return new QueryFeeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFeeResponse | PlainMessage<QueryFeeResponse> | undefined, b: QueryFeeResponse | PlainMessage<QueryFeeResponse> | undefined): boolean {
    return proto3.util.equals(QueryFeeResponse, a, b);
  }
}

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message canto.fees.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.fees.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message canto.fees.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: canto.fees.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.fees.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryDeployerFeesRequest is the request type for the Query/DeployerFees RPC
 * method.
 *
 * @generated from message canto.fees.v1.QueryDeployerFeesRequest
 */
export class QueryDeployerFeesRequest extends Message<QueryDeployerFeesRequest> {
  /**
   * deployer bech32 address
   *
   * @generated from field: string deployer_address = 1;
   */
  deployerAddress = "";

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDeployerFeesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.fees.v1.QueryDeployerFeesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployer_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDeployerFeesRequest {
    return new QueryDeployerFeesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDeployerFeesRequest {
    return new QueryDeployerFeesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDeployerFeesRequest {
    return new QueryDeployerFeesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDeployerFeesRequest | PlainMessage<QueryDeployerFeesRequest> | undefined, b: QueryDeployerFeesRequest | PlainMessage<QueryDeployerFeesRequest> | undefined): boolean {
    return proto3.util.equals(QueryDeployerFeesRequest, a, b);
  }
}

/**
 * QueryDeployerFeesResponse is the response type for the Query/DeployerFees RPC
 * method.
 *
 * @generated from message canto.fees.v1.QueryDeployerFeesResponse
 */
export class QueryDeployerFeesResponse extends Message<QueryDeployerFeesResponse> {
  /**
   * @generated from field: repeated canto.fees.v1.Fee fees = 1;
   */
  fees: Fee[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryDeployerFeesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.fees.v1.QueryDeployerFeesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fees", kind: "message", T: Fee, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDeployerFeesResponse {
    return new QueryDeployerFeesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDeployerFeesResponse {
    return new QueryDeployerFeesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDeployerFeesResponse {
    return new QueryDeployerFeesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDeployerFeesResponse | PlainMessage<QueryDeployerFeesResponse> | undefined, b: QueryDeployerFeesResponse | PlainMessage<QueryDeployerFeesResponse> | undefined): boolean {
    return proto3.util.equals(QueryDeployerFeesResponse, a, b);
  }
}

