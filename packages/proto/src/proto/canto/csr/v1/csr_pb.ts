// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file canto/csr/v1/csr.proto (package canto.csr.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * The CSR struct is a wrapper to all of the metadata associated with a given CST NFT
 *
 * @generated from message canto.csr.v1.CSR
 */
export class CSR extends Message<CSR> {
  /**
   * Contracts is the list of all EVM address that are registered to this NFT
   *
   * @generated from field: repeated string contracts = 1;
   */
  contracts: string[] = [];

  /**
   * The NFT id which this CSR corresponds to
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * The total number of transactions for this CSR NFT
   *
   * @generated from field: uint64 txs = 3;
   */
  txs = protoInt64.zero;

  /**
   * The cumulative revenue for this CSR NFT -> represented as a sdk.Int
   *
   * @generated from field: string revenue = 4;
   */
  revenue = "";

  constructor(data?: PartialMessage<CSR>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.csr.v1.CSR";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contracts", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "txs", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "revenue", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CSR {
    return new CSR().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CSR {
    return new CSR().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CSR {
    return new CSR().fromJsonString(jsonString, options);
  }

  static equals(a: CSR | PlainMessage<CSR> | undefined, b: CSR | PlainMessage<CSR> | undefined): boolean {
    return proto3.util.equals(CSR, a, b);
  }
}

