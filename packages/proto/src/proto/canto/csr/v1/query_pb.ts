// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file canto/csr/v1/query.proto (package canto.csr.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { CSR } from "./csr_pb";

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message canto.csr.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.csr.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message canto.csr.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: canto.csr.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.csr.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryCSRsRequest is the request type for the Query/CSRs RPC method.
 *
 * @generated from message canto.csr.v1.QueryCSRsRequest
 */
export class QueryCSRsRequest extends Message<QueryCSRsRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryCSRsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.csr.v1.QueryCSRsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCSRsRequest {
    return new QueryCSRsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCSRsRequest {
    return new QueryCSRsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCSRsRequest {
    return new QueryCSRsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCSRsRequest | PlainMessage<QueryCSRsRequest> | undefined, b: QueryCSRsRequest | PlainMessage<QueryCSRsRequest> | undefined): boolean {
    return proto3.util.equals(QueryCSRsRequest, a, b);
  }
}

/**
 * QueryCSRsResponse is the response type for the Query/CSRs RPC method.
 *
 * @generated from message canto.csr.v1.QueryCSRsResponse
 */
export class QueryCSRsResponse extends Message<QueryCSRsResponse> {
  /**
   * @generated from field: repeated canto.csr.v1.CSR csrs = 1;
   */
  csrs: CSR[] = [];

  /**
   * pagination for response
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryCSRsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.csr.v1.QueryCSRsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "csrs", kind: "message", T: CSR, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCSRsResponse {
    return new QueryCSRsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCSRsResponse {
    return new QueryCSRsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCSRsResponse {
    return new QueryCSRsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCSRsResponse | PlainMessage<QueryCSRsResponse> | undefined, b: QueryCSRsResponse | PlainMessage<QueryCSRsResponse> | undefined): boolean {
    return proto3.util.equals(QueryCSRsResponse, a, b);
  }
}

/**
 * QueryCSRByNFTRequest is the request type for the Query/CSRByNFT RPC method.
 *
 * @generated from message canto.csr.v1.QueryCSRByNFTRequest
 */
export class QueryCSRByNFTRequest extends Message<QueryCSRByNFTRequest> {
  /**
   * @generated from field: uint64 nftId = 1;
   */
  nftId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryCSRByNFTRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.csr.v1.QueryCSRByNFTRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nftId", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCSRByNFTRequest {
    return new QueryCSRByNFTRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCSRByNFTRequest {
    return new QueryCSRByNFTRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCSRByNFTRequest {
    return new QueryCSRByNFTRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCSRByNFTRequest | PlainMessage<QueryCSRByNFTRequest> | undefined, b: QueryCSRByNFTRequest | PlainMessage<QueryCSRByNFTRequest> | undefined): boolean {
    return proto3.util.equals(QueryCSRByNFTRequest, a, b);
  }
}

/**
 * QueryCSRByNFTResponse is the response type for the Query/CSRByNFT RPC method.
 *
 * @generated from message canto.csr.v1.QueryCSRByNFTResponse
 */
export class QueryCSRByNFTResponse extends Message<QueryCSRByNFTResponse> {
  /**
   * csr object queried by nft id
   *
   * @generated from field: canto.csr.v1.CSR csr = 1;
   */
  csr?: CSR;

  constructor(data?: PartialMessage<QueryCSRByNFTResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.csr.v1.QueryCSRByNFTResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "csr", kind: "message", T: CSR },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCSRByNFTResponse {
    return new QueryCSRByNFTResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCSRByNFTResponse {
    return new QueryCSRByNFTResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCSRByNFTResponse {
    return new QueryCSRByNFTResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCSRByNFTResponse | PlainMessage<QueryCSRByNFTResponse> | undefined, b: QueryCSRByNFTResponse | PlainMessage<QueryCSRByNFTResponse> | undefined): boolean {
    return proto3.util.equals(QueryCSRByNFTResponse, a, b);
  }
}

/**
 * QueryCSRByContractRequest is the request type for the Query/CSRByContract RPC method.
 *
 * @generated from message canto.csr.v1.QueryCSRByContractRequest
 */
export class QueryCSRByContractRequest extends Message<QueryCSRByContractRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryCSRByContractRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.csr.v1.QueryCSRByContractRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCSRByContractRequest {
    return new QueryCSRByContractRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCSRByContractRequest {
    return new QueryCSRByContractRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCSRByContractRequest {
    return new QueryCSRByContractRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCSRByContractRequest | PlainMessage<QueryCSRByContractRequest> | undefined, b: QueryCSRByContractRequest | PlainMessage<QueryCSRByContractRequest> | undefined): boolean {
    return proto3.util.equals(QueryCSRByContractRequest, a, b);
  }
}

/**
 * QueryCSRByContractResponse is the response type for the Query/CSRByContract RPC method.
 *
 * @generated from message canto.csr.v1.QueryCSRByContractResponse
 */
export class QueryCSRByContractResponse extends Message<QueryCSRByContractResponse> {
  /**
   * csr object queried by smart contract address
   *
   * @generated from field: canto.csr.v1.CSR csr = 1;
   */
  csr?: CSR;

  constructor(data?: PartialMessage<QueryCSRByContractResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.csr.v1.QueryCSRByContractResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "csr", kind: "message", T: CSR },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryCSRByContractResponse {
    return new QueryCSRByContractResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryCSRByContractResponse {
    return new QueryCSRByContractResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryCSRByContractResponse {
    return new QueryCSRByContractResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryCSRByContractResponse | PlainMessage<QueryCSRByContractResponse> | undefined, b: QueryCSRByContractResponse | PlainMessage<QueryCSRByContractResponse> | undefined): boolean {
    return proto3.util.equals(QueryCSRByContractResponse, a, b);
  }
}

/**
 * QueryTurnstileRequest is the request type for the Query/Turnstile RPC method.
 *
 * @generated from message canto.csr.v1.QueryTurnstileRequest
 */
export class QueryTurnstileRequest extends Message<QueryTurnstileRequest> {
  constructor(data?: PartialMessage<QueryTurnstileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.csr.v1.QueryTurnstileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTurnstileRequest {
    return new QueryTurnstileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTurnstileRequest {
    return new QueryTurnstileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTurnstileRequest {
    return new QueryTurnstileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTurnstileRequest | PlainMessage<QueryTurnstileRequest> | undefined, b: QueryTurnstileRequest | PlainMessage<QueryTurnstileRequest> | undefined): boolean {
    return proto3.util.equals(QueryTurnstileRequest, a, b);
  }
}

/**
 * QueryTurnstileResponse is the response type for the Query/Turnstile RPC method.
 *
 * @generated from message canto.csr.v1.QueryTurnstileResponse
 */
export class QueryTurnstileResponse extends Message<QueryTurnstileResponse> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryTurnstileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "canto.csr.v1.QueryTurnstileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTurnstileResponse {
    return new QueryTurnstileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTurnstileResponse {
    return new QueryTurnstileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTurnstileResponse {
    return new QueryTurnstileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTurnstileResponse | PlainMessage<QueryTurnstileResponse> | undefined, b: QueryTurnstileResponse | PlainMessage<QueryTurnstileResponse> | undefined): boolean {
    return proto3.util.equals(QueryTurnstileResponse, a, b);
  }
}
