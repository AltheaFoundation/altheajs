// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file lockup/v1/genesis.proto (package lockup.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Params struct
 *
 * @generated from message lockup.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * The lockup module is engaged if locked is true (chain is "locked up")
   *
   * @generated from field: bool locked = 1;
   */
  locked = false;

  /**
   * Addresses not affected by the lockup module
   *
   * @generated from field: repeated string lock_exempt = 2;
   */
  lockExempt: string[] = [];

  /**
   * Messages with one of these types are blocked when the chain is locked up
   * and not sent from a lock_exempt address
   *
   * @generated from field: repeated string locked_message_types = 3;
   */
  lockedMessageTypes: string[] = [];

  /**
   * These tokens will be the only ones blocked while the chain is locked
   *
   * @generated from field: repeated string locked_token_denoms = 4;
   */
  lockedTokenDenoms: string[] = [];

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lockup.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locked", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "lock_exempt", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "locked_message_types", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "locked_token_denoms", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * @generated from message lockup.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * @generated from field: lockup.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lockup.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

