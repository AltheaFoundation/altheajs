// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file microtx/v1/query.proto (package microtx.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';
import { Params } from './genesis_pb';
import { LiquidInfrastructureAccount } from './msgs_pb';

/**
 * Query the current microtx params
 *
 * @generated from message microtx.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "microtx.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * @generated from message microtx.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: microtx.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "microtx.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * Query the additional fee paid on MsgMicrotx, determined by governance
 *
 * @generated from message microtx.v1.QueryMicrotxFeeRequest
 */
export class QueryMicrotxFeeRequest extends Message<QueryMicrotxFeeRequest> {
  /**
   * @generated from field: uint64 amount = 1;
   */
  amount = protoInt64.zero;

  constructor(data?: PartialMessage<QueryMicrotxFeeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "microtx.v1.QueryMicrotxFeeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryMicrotxFeeRequest {
    return new QueryMicrotxFeeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryMicrotxFeeRequest {
    return new QueryMicrotxFeeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryMicrotxFeeRequest {
    return new QueryMicrotxFeeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryMicrotxFeeRequest | PlainMessage<QueryMicrotxFeeRequest> | undefined, b: QueryMicrotxFeeRequest | PlainMessage<QueryMicrotxFeeRequest> | undefined): boolean {
    return proto3.util.equals(QueryMicrotxFeeRequest, a, b);
  }
}

/**
 * @generated from message microtx.v1.QueryMicrotxFeeResponse
 */
export class QueryMicrotxFeeResponse extends Message<QueryMicrotxFeeResponse> {
  /**
   * @generated from field: uint64 fee_amount = 1;
   */
  feeAmount = protoInt64.zero;

  constructor(data?: PartialMessage<QueryMicrotxFeeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "microtx.v1.QueryMicrotxFeeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fee_amount", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryMicrotxFeeResponse {
    return new QueryMicrotxFeeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryMicrotxFeeResponse {
    return new QueryMicrotxFeeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryMicrotxFeeResponse {
    return new QueryMicrotxFeeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryMicrotxFeeResponse | PlainMessage<QueryMicrotxFeeResponse> | undefined, b: QueryMicrotxFeeResponse | PlainMessage<QueryMicrotxFeeResponse> | undefined): boolean {
    return proto3.util.equals(QueryMicrotxFeeResponse, a, b);
  }
}

/**
 * Query the Liquid Infrastructure accounts known to the module
 *
 * @generated from message microtx.v1.QueryLiquidAccountsRequest
 */
export class QueryLiquidAccountsRequest extends Message<QueryLiquidAccountsRequest> {
  constructor(data?: PartialMessage<QueryLiquidAccountsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "microtx.v1.QueryLiquidAccountsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLiquidAccountsRequest {
    return new QueryLiquidAccountsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLiquidAccountsRequest {
    return new QueryLiquidAccountsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLiquidAccountsRequest {
    return new QueryLiquidAccountsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLiquidAccountsRequest | PlainMessage<QueryLiquidAccountsRequest> | undefined, b: QueryLiquidAccountsRequest | PlainMessage<QueryLiquidAccountsRequest> | undefined): boolean {
    return proto3.util.equals(QueryLiquidAccountsRequest, a, b);
  }
}

/**
 * @generated from message microtx.v1.QueryLiquidAccountsResponse
 */
export class QueryLiquidAccountsResponse extends Message<QueryLiquidAccountsResponse> {
  /**
   * @generated from field: repeated microtx.v1.LiquidInfrastructureAccount accounts = 1;
   */
  accounts: LiquidInfrastructureAccount[] = [];

  constructor(data?: PartialMessage<QueryLiquidAccountsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "microtx.v1.QueryLiquidAccountsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: LiquidInfrastructureAccount, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLiquidAccountsResponse {
    return new QueryLiquidAccountsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLiquidAccountsResponse {
    return new QueryLiquidAccountsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLiquidAccountsResponse {
    return new QueryLiquidAccountsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLiquidAccountsResponse | PlainMessage<QueryLiquidAccountsResponse> | undefined, b: QueryLiquidAccountsResponse | PlainMessage<QueryLiquidAccountsResponse> | undefined): boolean {
    return proto3.util.equals(QueryLiquidAccountsResponse, a, b);
  }
}

/**
 * Query for info about one particular Liquid Infrastructure account
 * OWNER if a bech32 address is provided, potenitally many accounts will be returned
 * ACCOUNT if a bech32 address is provided, the owner and nft contract address will be returned
 * NFT if a EVM address is provided and happens to be a LiquidInfrastructureNFT contract, the owner and account will be returned
 *
 * @generated from message microtx.v1.QueryLiquidAccountRequest
 */
export class QueryLiquidAccountRequest extends Message<QueryLiquidAccountRequest> {
  /**
   * @generated from field: string owner = 1;
   */
  owner = "";

  /**
   * @generated from field: string account = 2;
   */
  account = "";

  /**
   * @generated from field: string nft = 3;
   */
  nft = "";

  constructor(data?: PartialMessage<QueryLiquidAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "microtx.v1.QueryLiquidAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "nft", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLiquidAccountRequest {
    return new QueryLiquidAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLiquidAccountRequest {
    return new QueryLiquidAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLiquidAccountRequest {
    return new QueryLiquidAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLiquidAccountRequest | PlainMessage<QueryLiquidAccountRequest> | undefined, b: QueryLiquidAccountRequest | PlainMessage<QueryLiquidAccountRequest> | undefined): boolean {
    return proto3.util.equals(QueryLiquidAccountRequest, a, b);
  }
}

/**
 * @generated from message microtx.v1.QueryLiquidAccountResponse
 */
export class QueryLiquidAccountResponse extends Message<QueryLiquidAccountResponse> {
  /**
   * @generated from field: repeated microtx.v1.LiquidInfrastructureAccount accounts = 1;
   */
  accounts: LiquidInfrastructureAccount[] = [];

  constructor(data?: PartialMessage<QueryLiquidAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "microtx.v1.QueryLiquidAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "accounts", kind: "message", T: LiquidInfrastructureAccount, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryLiquidAccountResponse {
    return new QueryLiquidAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryLiquidAccountResponse {
    return new QueryLiquidAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryLiquidAccountResponse {
    return new QueryLiquidAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryLiquidAccountResponse | PlainMessage<QueryLiquidAccountResponse> | undefined, b: QueryLiquidAccountResponse | PlainMessage<QueryLiquidAccountResponse> | undefined): boolean {
    return proto3.util.equals(QueryLiquidAccountResponse, a, b);
  }
}
